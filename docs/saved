
<!--



```{r phishing pie chart}

phishingpie <- data %>%
  select(phishing) %>%
  group_by(phishing) %>% 
  summarise(occurances = n()) %>%
  mutate(phishing = recode(phishing, '1'='Phishing link', '0'="Non-phishing link"))

phishingagg <- plot_ly(phishingpie, labels = ~phishing, values = ~occurances, type = 'pie',marker = list(colors = c('#CC6666', '#9999CC')),
        textposition = 'inside',
        textinfo = 'label+percent',
        insidetextfont = list(color = '#FFFFFF'),
        hoverinfo = 'text',
        text = ~paste(occurances, 'links')) %>% 
  layout(title="Phishing V.S. Non-Phishing Links", 
         legend = list(x = 100, y = 0.5, title=list(text='<b> Types of Websites </b>')))

phishingagg

```

```{r, mean}

  mean(data$url_length)

```



We've got a smattering of data! Now, I want to analyze the data further: What is the correlation between phishing and each column? Employing the use of SQL: 

I'm going to be calcualting Pearson's correlation. it measures how strong the linear relationship between two variabels are. 

```{sql, eval=FALSE, echo=T} 
SELECT n_redirection, phishing, n_redirection*phishing AS xy, n_redirection*n_redirection AS xsquared, phishing*phishing AS ysquared
FROM pdata
```


```{sqll, eval=FALSE, echo=T} 
SELECT sum(n_redirection) over() AS sumx, sum(phishing) over() AS sumy, sum(xy) over() AS sumxy, sum(xsquared) over() AS sumxsquared, sum(ysquared) over() AS sumysquared, count(*) over() as n
FROM rawdata
```

```{sql f, eval=FALSE, echo=T} 
-- Removing duplicates
processedsumdata as (
SELECT *
FROM sumdata
GROUP BY sumx, sumy, sumxy, sumxsquared, sumysquared, n
HAVING count(*) > 1
)
```

```{sql test, eval=FALSE, echo=T} 
denomdata as (
SELECT  (n*cast(sumxy as bigint) - sumx*cast(sumy as bigint)) AS numerator, (n*cast(sumxsquared as bigint) - cast(sumx as bigint)*cast(sumx as bigint)) AS denomleft, cast(n*cast(sumysquared as bigint) - cast(sumy as bigint)*cast(sumy as bigint) as bigint) AS denomright
FROM processedsumdata
)
```


the results are as so: 

```{r, rawptable}


rawptable <- data.frame('Column' = c("n_slash", 'url_length', 'n_equal', 'n_and', 'n_dots', 'n_underline', 'n_questionmark', 'n_hypens', 'n_at', 'n_tilde', 'n_exclamation', 'n_comma', 'n_percent', 'n_dollar', 'n_asterisk', 'n_space', 'n_hastag', 'n_plus', 'n_redirection'), 

            'Numerator' = c(5385854242, 99393582580, 1204211637, 832565359, 1099592885, 586959775, 135012530, 931371980, 140992286, 18761519, 11625765, 10160320, 213278891, 12105850, 26123150, 10276904, 2867175, 3328057, -189847349),  
           'Denominator Left' = c(33486230402, 23048204106158, 9226297758, 8360440556, 15775508972, 5249714246, 281963048, 16549495946, 721448210, 61716542, 67684008, 63392174, 28785321710, 95037050, 808053752, 209323094, 33723924, 109122998, 6023076644), 
           'Denominator Right' = c(2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830, 2316804830), 
           "R Value" = c(0.6114722329, 0.4301253848, 0.2604619943, 0.1891729474, 0.1818844228, 0.1683045211, 0.1670449121, 0.150413237, 0.109055619, 0.04961608357, 0.02935849448, 0.02651214329, 0.02611665819, 0.02579907232, 0.01909240743, 0.01475737122, 0.01025747401, 0.006618931497, -0.05082186723))

colnames(rawptable) <- str_replace_all(colnames(rawptable), "[.]", " ")

paged_table(rawptable)


```

- mention r^2 
- critial value, etc. 

but! you might be asking! how does that work! supposed to be normalized data! 

well, you're right that pearson's correlation tells us nothing! we need to use the Point-Biserial Correlation.

briefly mention Kendall rank and Spearman coefficient

<!--

ggplot(urldata, aes(x=url_length, color=phishing)) + 
  geom_density()

```{r url_length m_and_sd}

pmean <- data %>% 
  select( phishing, url_length) %>%
  filter(phishing==1) %>%
  summarise(mean_p = mean(url_length))

psd <- data %>% 
  select( phishing, url_length) %>%
  filter(phishing==1) %>%
  summarise(sd_p = sd(url_length))

npmean <- data %>% 
  select( phishing, url_length) %>%
  filter(phishing==0) %>%
  summarise(mean_np = mean(url_length))

npsd <- data %>% 
  select( phishing, url_length) %>%
  filter(phishing==0) %>%
  summarise(sd_np = sd(url_length))

data.frame(pmean, psd, npmean, npsd)


```
- explain standard viation and mean and variance idk

```{r urldensity}

urldensity <- data.frame(
  phishingurl=factor(rep(c("Phishing", "Not Phishing"), each=300)),
  weight=round(c(rnorm(300, mean=66.49112, sd=68.59874),
                 rnorm(300, mean=23.58997	, sd=16.13607)))
  )


p <- ggplot(urldensity, aes(x=weight, color=phishingurl)) +
  geom_density() +
  geom_vline(aes(xintercept=66.49112),
             linetype="dashed", color='blue') +
  geom_vline(aes(xintercept=23.58997),
             linetype="dashed", color='blue') 
  p + scale_x_continuous(expand = c(0, 0), limits = c(0, NA)) + 
  scale_y_continuous(expand = c(0, 0), limits = c(0, NA), labels = scales::percent) +
    scale_color_manual(values=c("#CC6666", "#9999CC")) +
    labs(title = "URL Character Distribution", 
         subtitle = "Phishing URLs typically have more characters\n", 
         x = "\n Number of characters", 
         y = "Density \n", 
         color = "Types of URLs")

```
- make the links open to a blank page 


i can make a density plot for n_slash, n_urllength, n_redirections 
Histogram, Box plots, scatterplot
- t test 
- linear regression
- think i can also use the average measure to rpove 
- conduct hypothesis testing on all three? 
- descriptive statistics 
- r^2 and r? regresison analysis 

https://www.youtube.com/watch?v=VK-rnA3-41c

- general talk about teh data 
-> how many were fishing? how many weren't? -> pie chart 

correlation 
- build tables (take the head of x)
- explain the pearson correlation, how can we get info out 
- cast bigint and basically couldn twork, so had to build a table (you can build it using R)
create table 


url length 
- out of phishing, plot density graph, 
url lenght vs amount of urls -> phishing vs no phishing 

same thing with redirections 

- end

this shoudl be pretty quick and simple it hink

https://docs.google.com/spreadsheets/d/1JNzGqUo9HEn5WOKftEgcm94JddOK6G3_QW-UI4sFNUY/edit#gid=0

https://docs.google.com/document/d/1M9kvGEJ1_db81M5g6J8DtF0kAFnCCAPlnuUMzAmVUOA/edit

--> 